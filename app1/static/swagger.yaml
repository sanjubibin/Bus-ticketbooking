swagger: "2.0"
info:
  title: Bus Ticketbooking API
  description: This API allows to interact AS Travels website.
  version: "1.0.0"
host: localhost:8000


tags:
  - name: Sign Up
    description: SignUp API's
  - name: Log In
    description: LogIn API's
  - name: User Page
    description: User Home Page API's 
  - name: Admin Page
    description: Admin Page API's

securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header

paths:
  /rest/signup:
    post:
      operationId: signup
      tags:
        - Sign Up
      summary: Sign up a new user
      parameters:
        - name: username
          in: formData
          required: true
          type: string
          description: The username of the new user.
        - name: email
          in: formData
          required: true
          type: string
          description: The email address of the new user.
        - name: password1
          in: formData
          required: true
          type: string
          description: The password of the new user.
        - name: password2
          in: formData
          required: true
          type: string
          description: The password confirmation of the new user.
      responses:
        200:
          description: The user was successfully signed up.
        400:
          description: The request was invalid.

  /rest/login:
    post:
      operationId: login
      tags:
        - Log In
      summary: login to the User page or Admin page
      parameters:
        - name: username
          in: formData
          required: true
          type: string
          description: username of the user to login
        - name: password
          in: formData
          required: true
          type: string
          description: password of the user account
      responses:
        200:
          description: user was logged in successfully(authenticated)
        400:
          description: user was not logged in maybe you have not signed up or enter wrong data
  /auth/rest/home:
    post:
      security:
        - Bearer: []
      operationId: user_page
      tags:
        - User Page
      summary: User home page .Access this only after log in as User 
      description: from this page you can access urls with the pattern name's of "rest_checkavailability", "rest_bookticket", "rest_userdetail", "rest_logout"
      responses:
        200:
          description: you are in user home page(authenticated)
        400:
          description: login in to access this page
  
  /auth/rest/checkavailability:
    post:
      operationId: user_page_bus_checkavailability
      tags:
        - User Page
      security:
        - Bearer: []
      summary: check for available bus 
      parameters:
        - name: route_from
          in: formData
          required: true
          type: string
          description: enter the starting place name
        - name: destination_to
          in: formData
          required: true
          type: string
          description: enter the ending place name
        - name: date_of_travel
          in: formData
          required: true
          type: string
          description: enter the date in this format "YYYY-MM-DD"
      responses:
        200:
          description: you are in user's page - check availability(authenticated)
        
  /auth/rest/bookticket:
    post:
      operationId: user_page_bookticket
      tags:
        - User Page
      security:
        - Bearer: []
      summary: book bus tickets
      parameters:
        - name: bus_no
          in: formData
          required: true
          type: string
          description: number of the bus
        - name: no_of_seats
          in: formData
          required: true
          type: integer
          description: no seats user want to book
        - name: user_pickup_point
          in: formData
          required: true
          type: string
          description: place where the user want to be get picked
        - name: user_dropdown_point
          in: formData
          required: true
          type: string
          description: place where the user want to be get picked
      responses:
        200:
          description: ticketbooking was success
  /auth/rest/home/userdetails:
    get: 
      operationId: user_page_userbookingdetails
      tags:
        - User Page
      security:
        - Bearer: []
      summary: get user bus booking details
      responses:
        200:
          description: gives out the user's bus ticket booked details

  /rest/logout:
    post:
      operationId: user_page_logout
      tags:
        - User Page
      security:
        - Bearer: []
      summary: logout user
      # parameters:
      #   - name: refresh_token
      #     in: formData
      #     required: true
      #     type: string
      #     description: enter the bearer token
      responses:
        200:
          description: successfully logged out

  /auth/rest/addplace:
    get:
      operationId: add_bus_getrequest
      tags:
        - Admin Page
      security:
        - Bearer: []
      summary: verify whether the user is logged in as admin user or logout the user if the user is not admin
      responses:
        200:
          description: successful

    post:
      operationId: add_bus_postrequest
      tags:
        - Admin Page
      security:
        - Bearer: []
      summary: verify whether the user is logged in as admin user or logout the user if the user is not admin and add new places to the DataBase
      parameters:
        - name: places
          in: formData
          required: true
          type: string
          description: enter the places to add in DB
      responses:
        200:
          description: places added successfully
  
  /auth/rest/editplace:
    get:
      operationId: edit_bus_getrequest
      tags:
        - Admin Page
      security:
        - Bearer: []
      summary: verify whether the user is logged in as admin user or logout the user if the user is not admin
      responses:
        200:
          description: successful

    post:
      operationId: edit_bus_postrequest
      tags:
        - Admin Page
      security:
        - Bearer: []
      summary: edit the place with the Places table id in the DataBase also verify whether the user is logged in as admin user else logout the user if the user is not admin
      parameters:
        - name: place_id
          in: formData
          required: true
          type: integer
          description: enter the place id that the user want to edit
        - name: place
          in: formData
          required: true
          type: string
          description: enter the place that you want to edit
      responses:
        200:
          description: place edited successfully

  /auth/rest/deleteplace:
    get:
      operationId: delete_bus_getrequest
      tags:
        - Admin Page
      security:
        - Bearer: []
      summary: verify whether the user is logged in as admin user or logout the user if the user is not admin
      responses:
        200:
          description: successful
    post:
      operationId: delete_bus_postrequest
      tags:
        - Admin Page
      security:
        - Bearer: []
      summary: delete the place in the database with table id also verify whether the user is logged in as admin user or logout the user if the user is not admin
      parameters:
        - name: place_id
          in: formData
          required: true
          type: integer
          description: enter the place that you want to delete
      responses:
        200:
          description: place deleted successfully

  /auth/rest/addbus:
    get:
      operationId: add_bus_getrequest
      tags:
        - Admin Page
      security:
        - Bearer: []
      summary: verify whether the user is logged in as admin user or logout the user if the user is not admin
      responses:
        200:
          description: successful
    post:
      operationId: add_bus_postrequest
      tags:
        - Admin Page
      security:
        - Bearer: []
      summary: add new buses to the "Bus" table in DB but this not for booking ticket also verify whether the user is logged in as admin user or logout the user if the user is not admin
      parameters:
        - name: bus_no
          in: formData
          required: true
          type: string
          description: enter the bus no
        - name: bus_name
          in: formData
          required: true
          type: string
          description: enter the bus name
        - name: total_seats
          in: formData
          required: true
          type: string
          description: enter the total seat the bus has
        - name: bus_type
          in: formData
          required: true
          type: string
          enum:
            - sleeper
            - ac_sleeper
            - seated
            - ac_seated
          description: enter the bsu type
      responses:
        200:
          description: bus added successfully

  /auth/rest/editbus:
    get:
      operationId: edit_bus_getrequest
      tags:
        - Admin Page
      security:
        - Bearer: []
      summary: verify whether the user is logged in as admin user or logout the user if the user is not admin
      responses:
       200:
        description: successful
    post:
      operationId: edit_bus_postrequest
      tags:
        - Admin Page
      security:
        - Bearer: []
      summary: edit bus for the bus_id that you give also verify whether the user is logged in as admin user or logout the user if the user is not admin
      parameters:
        - name: bus_id
          in: formData
          required: true
          type: string
          description: enter the bus table id for which the coloumn values to be edited
        - name: bus_no
          in: formData
          required: true
          type: string
          description: enter the bus no
        - name: bus_name
          in: formData
          required: true
          type: string
          description: enter the bus name
        - name: total_seats
          in: formData
          required: true
          type: string
          description: enter the total seat the bus has
        - name: bus_type
          in: formData
          required: true
          type: string
          enum:
            - sleeper
            - ac_sleeper
            - seated
            - ac_seated
          description: enter the bus type
      responses:
        200:
          description: bus edited successfully
  
  /auth/rest/deletebus:
    get:
      operationId: delete_bus_getrequest
      tags:
        - Admin Page
      security:
        - Bearer: []
      summary: verify whether the user is logged in as admin user or logout the user if the user is not admin
      responses:
        200:
          description: successful
    post:
      operationId: delete_bus_postrequest
      tags:
        - Admin Page
      security:
        - Bearer: []
      summary: delete the bus and all data's related to it by just passing bus_id also verify whether the user is logged in as admin user or logout the user if the user is not admin
      parameters:
        - name: bus_id
          in: formData
          required: true
          type: integer
          description: enter the bus_id
      responses:
        200:
          description: bus deleted successfully
      
  /auth/rest:
    post:
      operationId: admin_page
      tags:
        - Admin Page
      security:
        - Bearer: []
      summary: verify whether the user authenticated and is the user is admin
      responses:
        200:
          description: successful
  
  /auth/rest/filteruser:
    post:
      operationId: filter_user
      tags:
        - Admin Page
      security:
        - Bearer: []
      summary: filter user username or email
      parameters:
        - name: filter_by
          in: formData
          required: true
          type: string
          enum:
            - email
            - username
          description: only select "email" or "username"
        - name: data
          in: formData
          required: true
          type: string
          description: enter the data based on the filter_by choice
      responses:
        200:
          description: display the user information

  /auth/rest/addbusstatus:
    get:
      operationId: add_busstatus_getrequest
      tags:
        - Admin Page
      security:
        - Bearer: []
      summary: Displahy all the bus status in detiails
      responses:
        200:
          description: successful

    post:
      operationId: add_busstatus_postrequest
      tags:
        - Admin Page
      security:
        - Bearer: []
      summary: add upcoming active bus status
      parameters:
        - name: bus_no
          in: formData
          required: true
          type: string
          description: enter the bus_no to select the whole bus
        - name: start_place
          in: formData
          required: true
          type: string
          description: enter the place from where the bus will take off(places from the DB)
        - name: end_place
          in: formData
          required: true
          type: string
          description: enter the place where the bus will end i's journey(places from the DB)
        - name: seats_available
          in: formData
          required: true
          type: string
          description: enter the remaining avaialble seats in the bus
        - name: start_date
          in: formData
          required: true
          type: string
          description: enter the data in the format of "YYYY-MM-DD"
        - name: start_time
          in: formData
          required: true
          type: string
          description: enter the time in the format 
        - name: end_date
          in: formData
          required: true
          type: string
          description: enter the date in the format of "YYYY-MM-DD"
        - name: end_time
          in: formData
          required: true
          type: string
          description: enter the time in the format
      responses:
        200:
          description: bus status added successfully

  /auth/rest/addprofile:
    get:
      operationId: add_profile_getrequest
      tags:
        - User Page
      security:
        - Bearer: []
      summary: display whether the user is logged in 
      responses:
        200:
          description: successful
    post:
      operationId: add_profile_postrequest
      tags:
        - User Page
      security:
        - Bearer: []
      summary: edit the user's photo, address, and mobile number
      parameters:
        - name: user_image
          in: formData
          required: true
          type: file
          description: upload the image
        - name: address
          in: formData
          required: true
          type: string
          description: enter your address
        - name: mobile
          in: formData
          required: true
          type: string
          description: enter your mobile number
        - name: first_name
          in: formData
          required: true
          type: string
          description: enter your first_name
        - name: last_name
          in: formData
          required: true
          type: string
          description: enter your last_name    
      responses:
        200:
          description: profile added successfully 

  /auth/rest/viewprofile:
    get:
      operationId: view_profile_getrequest
      tags:
        - User Page
      security:
        - Bearer: []
      summary: display the profile of the user 
      responses:
        200:
          description: successful




definitions:
  SignUpResponse:
    type: object
    properties:
      message:
        type: string
        description: The message indicating the success of the sign up.
      logged_username:
        type: string
        description: The username of the newly created user.
      logged_email:
        type: string
        description: The email address of the newly created user.
  SignUpErrorResponse:
    type: object
    properties:
      message:
        type: string
        description: The error message.

# components:
#   securityschemas:
#     csrf_token:



